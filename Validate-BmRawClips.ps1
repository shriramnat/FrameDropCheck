<#
.Synopsis
Useful for validating RAW clips generated by BM Ursa and Ursa Mini.
.EXAMPLE
.\Validate-BmRawClips.ps1 -PathsToAnalyze @("I:\Day-17")
.EXAMPLE
.\Validate-BmRawClips.ps1 -PathsToAnalyze @("H:\A004_07102045_C001") -IndividualClip
.EXAMPLE
.\Validate-BmRawClips.ps1 -PathsToAnalyze @("I:\Day-17","H:\")
.EXAMPLE
.\Validate-BmRawClips.ps1 -PathsToAnalyze @("H:\A004_07102045_C001","H:\A004_07102145_C006") -IndividualClip
#>

Param
(
    # An array of Paths which need to be analyzed. This can be a folder containing clips or individual clips themselves.
    [Parameter(Mandatory=$true,
                ValueFromPipelineByPropertyName=$false,
                Position=0)]
    $PathsToAnalyze,

    # If specifying individual clips in the Paths to Analyze, this flag needs to be specified to let the script know not to look for sub folders.
    [switch]
    $IndividualClip
)

filter ColorWord {
    param(
        [string] $word,
        [string] $ForegroundColor,
        [string] $BackgroundColor
    )
    $line = $_
    $index = $line.IndexOf($word, [System.StringComparison]::InvariantCultureIgnoreCase)
    while($index -ge 0){
        Write-Host $line.Substring(0,$index) -NoNewline
        Write-Host $line.Substring($index, $word.Length) -NoNewline -ForegroundColor $ForegroundColor -BackgroundColor $BackgroundColor
        $used = $word.Length + $index
        $remain = $line.Length - $used
        $line = $line.Substring($used, $remain)
        $index = $line.IndexOf($word, [System.StringComparison]::InvariantCultureIgnoreCase)
    }
    Write-Host $line
}

$analysisResults = @()
$errorArray = @{}
$clipsAnalyzed = 0

foreach($Path in $PathsToAnalyze) {
    Write-Host "========================================`nAnalyzing Path $Path`n========================================" -ForegroundColor Yellow

    if (-not $IndividualClip) {
        $folders = Get-ChildItem $Path -Directory | Sort-Object FullName
        $clipsAnalyzed+=$folders.Count
        }
    else {
        $folders = @($Path)
        $clipsAnalyzed+=$folders.Count
    }

    foreach ($folder in $folders) {
        try{
                if (-not $individualClip) {
                    $folderName = $folder.FullName
                    }
                else {
                    $folderName = $folder
                }

                $files = Get-ChildItem $folderName -File
                [int] $lasthightestFile = [convert]::ToInt32($($($files | Sort-Object FullName -Descending)[0].ToString().Split(".")[0]).Split("_")[-1])

                $analysisResultsElement = @{
                    FolderName = $folderName
                    TotalFiles = $files.Count
                    HighestFrame = $lasthightestFile
                }
 
                if($files.Count - $lasthightestFile -eq 2) {
                    $analysisResultsElement.Add("Status", "Matched")
                }
                else {
                    $analysisResultsElement.Add("Status", " Failed")
                    $errorArray.Add($folderName,  [System.Math]::Abs($lasthightestFile - $files.Count))
                }

            }
            catch {
                $analysisResultsElement = @{
                    FolderName = $folderName
                    TotalFiles = ""
                    HighestFrame = ""
                    Status = "Unable to Analyze"
                }
            }

            $analysisResults+=$analysisResultsElement
        }
    }

Write-Host "`nDETAILS:`nNumber of clips analyzed:" $clipsAnalyzed -ForegroundColor Yellow
$analysisResults.ForEach({[PSCustomObject]$_}) | Format-Table FolderName, Status,HighestFrame,TotalFiles -AutoSize | Out-String| ColorWord -word "Failed" -ForegroundColor Red -BackgroundColor Yellow
    
Write-Host "`nClips with frames dropped" -ForegroundColor Yellow
if($errorArray.Count -ne 0) {$errorArray} else {Write-Host "None!"}
